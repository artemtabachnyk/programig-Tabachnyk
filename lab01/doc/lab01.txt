Табачник Артем Анатолійович 
	Група: КН-922в
	Лабораторна робота: №1 
	Тема роботи: Освоєння командної строки Linux




Хід роботи



	1. Встановлення додатку VirtualBox

		Що треба зробити:
		Встановити додаток VirtualBox, що дозволить встановити віртуальну ОС Linux.

		Як треба зробити:
		Для цього нам потрібно перейти до браузеру на сайт https://www.virtualbox.org 
		Завантажити інсталятор та встановити VirtualBox на ПК. 

		Результат:
		У результаті ми отримаємо встановлений VirtualBox. 


	2. Встановлення образу Linux 

		Що треба зробити:
		Знайти, завантажити та встановити образ Ubuntu  для подальшої роботи.

		Як треба зробити:
		Для цього ми можемо звернутись до сайту одного з дистрибутивів Linux
		за посиланням: https://ubuntu.com/download/desktop/
		Та завантажити версію адаптовану для VM. Далі при створенні віртуальної машини 
		у VirtualBox вибрати цей образ системи.

		Результат:
		Встановленний функціонуючий Ubuntu Linux на віртуальній машині. 


	3. Встановлення необхідних для роботи пакетів

		Що треба зробити:
		За допомогою apt-get встановити пакети:
		git, clang, clang-format, clang-tidy, tree, make. 

		Як треба зробити:
		Для цього необхідно запустити термінал та виконати наступні команди: 

		sudo apt install make 
                sudo apt install clang 
                sudo apt install clang-format 
                sudo apt install clang-tidy 
                sudo apt install tree 
		sudo apt install git 


		Результат:
		Маэмо встановленні необхідні для роботи пакети.

		Вже встановленні пакети перевіряються на оновлення.


	4. Клонування проєкту з github

		Що треба зробити:
		За допомогою системи контролю версіями git
		командою git clone виконати клонування проекту.

		Як треба зробити:
		Пишемоу терміналі команду  
		git clone https://github.com/davydov-vyacheslav/sample_project

		Результат:
		Маємо скопійований репозиторій для подальшої роботи.


	5. Знайомство з утилітою tree 

		Що треба зробити:
		Зайти в директорію склонованого проекту та завдяки утиліті tree
		необхідно вивести на екран структуру каталогів проекту. 

		Як треба зробити:
		виконати команду: tree
				      
                Результат:
		.
		├── CMakeLists.txt
		├── lab00
		│   ├── CMakeLists.txt
		│   ├── dist
		│   │   └── main.bin
		│   ├── doc
		│   │   ├── assets
		│   │   │   └── animal-fields.png
		│   │   ├── lab00.docx
		│   │   ├── lab00.md
		│   │   └── lab00.pdf
		│   ├── Doxyfile
		│   ├── Makefile
		│   ├── README.md
		│   └── src
		│       ├── lib.c
		│       ├── lib.h
		│       └── main.c
		├── lab-cpp00
		│   ├── CMakeLists.txt
		│   ├── leaks_suppr.txt
		│   ├── Makefile
		│   ├── README.md
		│   ├── src
		│   │   ├── lib.cpp
		│   │   ├── lib.h
		│   │   └── main.cpp
		│   └── test
		│       └── test.cpp
		├── README.md
		└── sample_test_libcheck
			└── test.c

		9 directories, 23 files


	6. Компіляція проєкту

		Що треба зробити:
		Зібрати проєкт для можливості запустити програму.

		Як треба зробити:
		В терміналі зайти до склонованого каталогу; 
		Перейти до каталогу, де знаходиться файл Makefile; 
		Перевірити за допомогою команди ls  дійсність його наявності 
		
                Виконав команду: make clean prep compile check вдосконалитись, що помилок немає; 
		За допомогою утиліти tree знайти створені файли; 
		Перейти до каталогу dist та виконати отримані бінарні файли. 

		Результат:
		
                $ make clean prep compile check
		rm -rf dist
		mkdir dist
		clang  -std=gnu11 -g -Wall -Wextra -Werror -Wformat-security -Wfloat-equal -Wshadow -Wconversion -Wlogical-not-parentheses -Wnull-dereference -Wno-unused-variable -Werror=vla -I./src src/lib.c src/main.c -o ./dist/main.bin
		clang-format --verbose -dry-run --Werror src/*
		Formatting [1/3] src/lib.c
		Formatting [2/3] src/lib.h
		Formatting [3/3] src/main.c
		clang-tidy src/*.c  -checks=-readability-uppercase-literal-suffix,-readability-magic-numbers,-clang-analyzer-deadcode.DeadStores,-clang-analyzer-security.insecureAPI.rand
		Error while trying to load a compilation database:
		Could not auto-detect compilation database for file "src/lib.c"
		No compilation database found in /home/cybera/sample_project/lab00/src or any parent directory
		fixed-compilation-database: Error while opening fixed database: No such file or directory
		json-compilation-database: Error while opening JSON database: No such file or directory
		Running without flags.
		2073 warnings generated.
		4146 warnings generated.
		Suppressed 4146 warnings (4146 in non-user code).
		Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
		rm -rf src/*.dump

		$ tree
		.
		├── CMakeLists.txt
		├── dist
		│   └── main.bin
		├── doc
		│   ├── assets
		│   │   └── animal-fields.png
		│   ├── lab00.docx
		│   ├── lab00.md
		│   └── lab00.pdf
		├── Doxyfile
		├── Makefile
		├── README.md
		└── src
			├── lib.c
			├── lib.h
			└── main.c

		4 directories, 12 files

		[~/sample_project/lab00/dist] $ ./main.bin

		Інформація про тварину №01: Свиня: зріст = 73 см, маса = 117 гр. 
		Інформація про тварину №02: Корова: зріст = 117 см, маса = 52 гр. 
		Інформація про тварину №03: Свиня: зріст = 41 см, маса = 88 гр. 
		Інформація про тварину №04: Кіт: зріст = 109 см, маса = 119 гр. 
		Інформація про тварину №05: Собака: зріст = 37 см, маса = 81 гр. 
		Інформація про тварину №06: Свиня: зріст = 54 см, маса = 41 гр. 
		Інформація про тварину №07: Кіт: зріст = 126 см, маса = 76 гр. 
		Інформація про тварину №08: Корова: зріст = 54 см, маса = 8 гр. 
		Інформація про тварину №09: Собака: зріст = 33 см, маса = 73 гр. 
		Інформація про тварину №10: Собака: зріст = 48 см, маса = 34 гр.


	7. Зміна коду 

		Що треба зробити:
		Змінити код, щоб можна було побачити зміни візуально 
		і не з'явилось помилок при компіляції.

		Як треба зробити:
		Для наявної демонстрації можна додати нову тварину, наприклад лева.
		Для цього:
			1) У файл lib.h, що знаходиться у sample_project/lab00/src/
			Додати новий вид тварини у колекцію enum animal_type, 
			За стилем коду це буде  LION, /Лев */
			2) У lib.c також додаємо поняття коза у switch-case конструкцію
			дописавши case LION: 
			          result = "Лев";
    				  break;  
			3)


		Результат:
		enum animal_type {
			PIG, /< Свиня */
			COW, /< Корова */
			DOG, /< Собака */
			CAT, /< Кіт */
			LION, /Лев */
			ANIMAL_TYPE_COUNT /< Кількість тварин */
		};

		const char *get_animal_type_name(enum animal_type type)
		{
			const char *result;
			switch (type) {
			case CAT:
				result = "Кіт";
				break;
			case DOG:
				result = "Собака";
				break;
			case COW:
				result = "Корова";
				break;
			case PIG:
				result = "Свиня";
				break;
			case LION:
				result = "Лев";
				break;
			default:
				result = "N/A";
			}
			return result;
		}


	8. Перекомпіляція

		Що треба зробити:
		Перекомпілювати проєкт з новим кодом та продемонструвати зміни.

		Як треба зробити:
		За домопогою стрілок можна швидко знайти команду make clean prep compile check
		Переконатися, що немає помилок і виконати перекомпільований файл.

		Результат:
		$ ./main.bin
		Інформація про тварину №01: Лев: зріст = 123 см, маса = 107 гр. 
		Інформація про тварину №02: Собака: зріст = 90 см, маса = 3 гр. 
		Інформація про тварину №03: Корова: зріст = 66 см, маса = 70 гр. 
		Інформація про тварину №04: Собака: зріст = 99 см, маса = 120 гр. 
		Інформація про тварину №05: Собака: зріст = 15 см, маса = 59 гр. 
		Інформація про тварину №06: Свиня: зріст = 4 см, маса = 93 гр. 
		Інформація про тварину №07: Корова: зріст = 7 см, маса = 26 гр. 
		Інформація про тварину №08: Свиня: зріст = 88 см, маса = 41 гр. 
		Інформація про тварину №09: Лев: зріст = 106 см, маса = 11 гр. 
		Інформація про тварину №10: Кіт: зріст = 76 см, маса = 21 гр.


	9. Зміни в Makefile

		Що треба зробити:
		Додати ціль all, яка буде виконувати цілі clean prep compile check;
		перевірити роботу Makefile, шляхом виконання команди make all;

		Як треба зробити:
		Відкриваємо Makefile за допомогою команди nano 
		та у самому кінці вставляемо: all: clean prep compile check.
		Виконуемо команду: make all
		
		Результат:
		$ make all                   
		make clean prep compile check
		make[1]: Entering directory '/home/cybera/sample_project/lab00'
		rm -rf dist
		mkdir dist
		clang  -std=gnu11 -g -Wall -Wextra -Werror -Wformat-security -Wfloat-equal -Wshadow -Wconversion -Wlogical-not-parentheses -Wnull-dereference -Wno-unused-variable -Werror=vla -I./src src/lib.c src/main.c -o ./dist/main.bin
		clang-format --verbose -dry-run --Werror src/*
		Formatting [1/3] src/lib.c
		Formatting [2/3] src/lib.h
		Formatting [3/3] src/main.c
		clang-tidy src/*.c  -checks=-readability-uppercase-literal-suffix,-readability-magic-numbers,-clang-analyzer-deadcode.DeadStores,-clang-analyzer-security.insecureAPI.rand
		Error while trying to load a compilation database:
		Could not auto-detect compilation database for file "src/lib.c"
		No compilation database found in /home/cybera/sample_project/lab00/src or any parent directory
		fixed-compilation-database: Error while opening fixed database: No such file or directory
		json-compilation-database: Error while opening JSON database: No such file or directory
		Running without flags.
		2073 warnings generated.
		4146 warnings generated.
		Suppressed 4146 warnings (4146 in non-user code).
		Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
		rm -rf src/*.dump
		make[1]: Leaving directory '/home/cybera/sample_project/lab00'


	10. Визначення версій 
	
		Що треба зробити:
		Визначити поточну версію утиліти clang та make;

		Як треба зробити:
		Виконуємо команду: clang --version 
		make --version

		Результат:
		Одразу отримуємо необхідний результат.

		Debian clang version 14.0.6-2
		Target: x86_64-pc-linux-gnu
		Thread model: posix
		InstalledDir: /usr/bin
		
		GNU Make 4.3
		Built for x86_64-pc-linux-gnu
		Copyright (C) 1988-2020 Free Software Foundation, Inc.
		License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
		This is free software: you are free to change and redistribute it.
		There is NO WARRANTY, to the extent permitted by law.

		Данні вище свідчать, що версія clang - 14.0.6-2, а версія make - 4.3.


	11. Дослідження роботи утиліти man

		Що треба зробити:
		Дослідити роботу утиліти man та описати її призначення.

		Як треба зробити:
		У терміналі виконуємо команду: man man  

		Результат:
		Утиліта man -- це інтерфейс, що використовується для перегляду довідкових посібників системи, 
		звідси й назва: man - скорочення від manual.


	12. Демонстрація змін у файлах

		Що треба зробити:
		За допомогою команди git diff показати виконані зміни у файлах

		Як треба зробити:
		Виконуємо команду: git giff

		Результат:
		diff --git a/lab00/Makefile b/lab00/Makefile
		index 19af541..777c25d 100644
		--- a/lab00/Makefile
		+++ b/lab00/Makefile
		@@ -2,6 +2,8 @@ CC = clang
		LAB_OPTS = -I./src src/lib.c
		C_OPTS = $(MAC_OPTS) -std=gnu11 -g -Wall -Wextra -Werror -Wformat-security -Wfloat-equal -Wshadow -Wconversion -Wlogical-not-parentheses -Wnull-dereference -Wno-unused-variable -Werror=vla $(LAB_OPTS)
		
		+all:
		+        clean prep compile check
		clean:
				rm -rf dist
		prep:
		diff --git a/lab00/src/lib.c b/lab00/src/lib.c
		index f7f86e0..18916d3 100644
		diff --git a/lab00/Makefile b/lab00/Makefile
		index 19af541..777c25d 100644
		--- a/lab00/Makefile
		+++ b/lab00/Makefile
		@@ -25,6 +25,9 @@ const char *get_animal_type_name(enum animal_type type)
				case PIG:
				result = "Свиня";
			        break;
		+       case LION:
		+               result = "Лев";
		+               break;
				default:
					result = "N/A";
				}
		diff --git a/lab00/src/lib.h b/lab00/src/lib.h
		index 0fe857b..7e4d6d0 100644
		--- a/lab00/src/lib.h
		+++ b/lab00/src/lib.h
		@@ -29,6 +29,7 @@ enum animal_type {
				COW, /< Корова */
				DOG, /< Собака */
				CAT, /< Кіт */
		+               LION, /**Лев */
				ANIMAL_TYPE_COUNT /< Кількість тварин */
		};




